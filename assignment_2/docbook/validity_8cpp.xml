<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_validity_8cpp" xml:lang="en-US">
<title>validity.cpp File Reference</title>
<indexterm><primary>validity.cpp</primary></indexterm>
<programlisting>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;
</programlisting>Include dependency graph for validity.cpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structres">res</link></para>

<para>A struct that contains the root node of a given propositional logic formula and it&apos;s index in the string. </para>
</listitem>
            <listitem><para>struct <link linkend="_structsplit__result">split_result</link></para>

<para>A struct that stores validity of a given line of proof and the propositional logic formula split into 2 parts at the root. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_structres">res</link> * <link linkend="_validity_8cpp_1a8885981b980af30bd5db04d3be79cafc">find_root</link> (string s)</para>

<para>Finds root node of the propositional logic formula. </para>
</listitem>
            <listitem><para><link linkend="_structsplit__result">split_result</link> * <link linkend="_validity_8cpp_1a1db52045025282bb64c8c0ec8310bae8">split</link> (string s, char delimiter)</para>

<para>Splits the propositional logic formula at its root node. </para>
</listitem>
            <listitem><para>bool <link linkend="_validity_8cpp_1a60646f51bfd90738e3dbee68861e095d">and_intro_checker</link> (string l1, string l2, string r)</para>

<para>Checks if the &apos;and introduction&apos; rule has been used correctly. </para>
</listitem>
            <listitem><para>bool <link linkend="_validity_8cpp_1a405a66752cce8015790914e547f536a3">and_elim_checker</link> (string l, string r, int n=1)</para>

<para>Checks if the &apos;and elimination&apos; rule has been used correctly. </para>
</listitem>
            <listitem><para>bool <link linkend="_validity_8cpp_1a21a712c92fec631807207c1c14a04203">or_intro_checker</link> (string l, string r, int n=1)</para>

<para>Checks if the &apos;or introduction&apos; rule has been used correctly. </para>
</listitem>
            <listitem><para>bool <link linkend="_validity_8cpp_1ae2fc6dbf6e60b752ff38c4b59ba29a49">implies_elim_checker</link> (string l1, string l2, string r)</para>

<para>Checks if the &apos;implies elimination&apos; rule has been used correctly. </para>
</listitem>
            <listitem><para>string <link linkend="_validity_8cpp_1a90e620998abd5bf70fd916af02c0e418">make_negation</link> (string s)</para>

<para>Returns negation of propostional logic formula. </para>
</listitem>
            <listitem><para>bool <link linkend="_validity_8cpp_1a0c2eca33760e98ac1facc25b700a45f4">mt_checker</link> (string l1, string l2, string r)</para>

<para>Checks if the &apos;MT&apos; rule has been used correctly. </para>
</listitem>
            <listitem><para>int <link linkend="_validity_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_validity_8cpp_1a405a66752cce8015790914e547f536a3"/>    <section>
    <title>and_elim_checker()</title>
<indexterm><primary>and_elim_checker</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>and_elim_checker</secondary></indexterm>
<para><computeroutput>bool and_elim_checker (string l, string r, int n = <computeroutput>1</computeroutput>
)</computeroutput></para><para>

<para>Checks if the &apos;and elimination&apos; rule has been used correctly. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>l</entry>
                                <entry>
<para>The propositional logic formula on which &apos;and elimination&apos; rule has been used </para>
</entry>
                            </row>
                            <row>
                                <entry>r</entry>
                                <entry>
<para>The propositional logic formula formed as a result of the use of &apos;and elimination&apos; rule </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>Integer that stores whether &apos;and elimiation&apos; rule 1 or 2 has been used </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Boolean that checks if the rule has been correctly used </para>
</formalpara>
</para>
<para>
Definition at line 131 of file validity.cpp.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a405a66752cce8015790914e547f536a3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a405a66752cce8015790914e547f536a3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1a60646f51bfd90738e3dbee68861e095d"/>    <section>
    <title>and_intro_checker()</title>
<indexterm><primary>and_intro_checker</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>and_intro_checker</secondary></indexterm>
<para><computeroutput>bool and_intro_checker (string l1, string l2, string r)</computeroutput></para><para>

<para>Checks if the &apos;and introduction&apos; rule has been used correctly. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>l1</entry>
                                <entry>
<para>The first propositional logic formula used in the &apos;and introduction&apos; rule </para>
</entry>
                            </row>
                            <row>
                                <entry>l2</entry>
                                <entry>
<para>The second propositional logic formula used in the &apos;and introduction&apos; rule </para>
</entry>
                            </row>
                            <row>
                                <entry>r</entry>
                                <entry>
<para>The propositional logic formula that used the &apos;and introduction&apos; rule </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Boolean that checks if the rule has been correctly used </para>
</formalpara>
</para>
<para>
Definition at line 121 of file validity.cpp.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a60646f51bfd90738e3dbee68861e095d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1a8885981b980af30bd5db04d3be79cafc"/>    <section>
    <title>find_root()</title>
<indexterm><primary>find_root</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>find_root</secondary></indexterm>
<para><computeroutput><link linkend="_structres">res</link>* find_root (string s)</computeroutput></para><para>

<para>Finds root node of the propositional logic formula. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>s</entry>
                                <entry>
<para>The propositional logic formula. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to a struct res that contains the root node and and it&apos;s index in the string. </para>
</formalpara>
</para>
<para>
Definition at line 18 of file validity.cpp.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a8885981b980af30bd5db04d3be79cafc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1ae2fc6dbf6e60b752ff38c4b59ba29a49"/>    <section>
    <title>implies_elim_checker()</title>
<indexterm><primary>implies_elim_checker</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>implies_elim_checker</secondary></indexterm>
<para><computeroutput>bool implies_elim_checker (string l1, string l2, string r)</computeroutput></para><para>

<para>Checks if the &apos;implies elimination&apos; rule has been used correctly. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>l1</entry>
                                <entry>
<para>The propositional loigc formula with root as &gt; </para>
</entry>
                            </row>
                            <row>
                                <entry>l2</entry>
                                <entry>
<para>The propositional logic formula on which &gt; is checked </para>
</entry>
                            </row>
                            <row>
                                <entry>r</entry>
                                <entry>
<para>The propositional logic formula formed as a result of the use of &apos;implies elimination&apos; rule </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Boolean that checks if the rule has been correctly used </para>
</formalpara>
</para>
<para>
Definition at line 163 of file validity.cpp.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_ae2fc6dbf6e60b752ff38c4b59ba29a49_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_ae2fc6dbf6e60b752ff38c4b59ba29a49_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>
Definition at line 212 of file validity.cpp.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1a90e620998abd5bf70fd916af02c0e418"/>    <section>
    <title>make_negation()</title>
<indexterm><primary>make_negation</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>make_negation</secondary></indexterm>
<para><computeroutput>string make_negation (string s)</computeroutput></para><para>

<para>Returns negation of propostional logic formula. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>s</entry>
                                <entry>
<para>The propositional logic formula to be negated </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The negated propostional logic formula </para>
</formalpara>
</para>
<para>
Definition at line 180 of file validity.cpp.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a90e620998abd5bf70fd916af02c0e418_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1a0c2eca33760e98ac1facc25b700a45f4"/>    <section>
    <title>mt_checker()</title>
<indexterm><primary>mt_checker</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>mt_checker</secondary></indexterm>
<para><computeroutput>bool mt_checker (string l1, string l2, string r)</computeroutput></para><para>

<para>Checks if the &apos;MT&apos; rule has been used correctly. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>l1</entry>
                                <entry>
<para>The propositional loigc formula with root as &gt; </para>
</entry>
                            </row>
                            <row>
                                <entry>l2</entry>
                                <entry>
<para>The propositional logic formula on which &gt; is checked </para>
</entry>
                            </row>
                            <row>
                                <entry>r</entry>
                                <entry>
<para>The propositional logic formula formed as a result of the use of &apos;MT&apos; rule </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Boolean that checks if the rule has been correctly used </para>
</formalpara>
</para>
<para>
Definition at line 197 of file validity.cpp.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a0c2eca33760e98ac1facc25b700a45f4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a0c2eca33760e98ac1facc25b700a45f4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1a21a712c92fec631807207c1c14a04203"/>    <section>
    <title>or_intro_checker()</title>
<indexterm><primary>or_intro_checker</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>or_intro_checker</secondary></indexterm>
<para><computeroutput>bool or_intro_checker (string l, string r, int n = <computeroutput>1</computeroutput>
)</computeroutput></para><para>

<para>Checks if the &apos;or introduction&apos; rule has been used correctly. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>l</entry>
                                <entry>
<para>The propositional logic formula on which &apos;or introduction&apos; rule has been used </para>
</entry>
                            </row>
                            <row>
                                <entry>r</entry>
                                <entry>
<para>The propositional logic formula formed as a result of the use of &apos;or introduction&apos; rule </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>Integer that stores whether &apos;or introduction&apos; rule 1 or 2 has been used </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Boolean that checks if the rule has been correctly used </para>
</formalpara>
</para>
<para>
Definition at line 147 of file validity.cpp.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a21a712c92fec631807207c1c14a04203_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a21a712c92fec631807207c1c14a04203_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_validity_8cpp_1a1db52045025282bb64c8c0ec8310bae8"/>    <section>
    <title>split()</title>
<indexterm><primary>split</primary><secondary>validity.cpp</secondary></indexterm>
<indexterm><primary>validity.cpp</primary><secondary>split</secondary></indexterm>
<para><computeroutput><link linkend="_structsplit__result">split_result</link>* split (string s, char delimiter)</computeroutput></para><para>

<para>Splits the propositional logic formula at its root node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>s</entry>
                                <entry>
<para>The propositional logic formuala to be split at the root </para>
</entry>
                            </row>
                            <row>
                                <entry>delimiter</entry>
                                <entry>
<para>The operator expected to be the root node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to struct <link linkend="_structsplit__result">split_result</link> that stores the validity and parts of the split </para>
</formalpara>
</para>
<para>
Definition at line 103 of file validity.cpp.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a1db52045025282bb64c8c0ec8310bae8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="validity_8cpp_a1db52045025282bb64c8c0ec8310bae8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
